
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on; 

#keepalive_timeout  0;
    keepalive_timeout  65;

#gzip  on;

    lua_code_cache off;
    lua_shared_dict my_cache 10m;
    lua_shared_dict my_locks 1m;
    lua_package_path '/opt/dark/workspace/openresty/project/?.lua;/opt/dark/workspace/openresty/lualib/?.lua;';
    lua_package_cpath '/opt/dark/workspace/openresty/lualib/?.so;;';


    server {
	    listen 1111;
	    server_name localhost;
	    location /t {
		    echo '1111';
	    }
    }

    server {
	    listen 2222;
	    server_name localhost;
	    location /t {
		    echo '2222';
	    }
    }

    server {
	    listen 3333;
	    server_name localhost;
	    location /t {
		    echo '3333';
	    }
    }

    server {
	    listen 4444;
	    server_name localhost;
	    location /t {
		    echo '4444';
	    }
    }

    upstream tttt {
	    server 127.0.0.1:1111;
	    server 127.0.0.1:2222;
	    server 127.0.0.1:3333 backup;
	    server 127.0.0.1:4444;
    }

    upstream ttt {
	    server 127.0.0.1:1111;
	    server 127.0.0.1:2222;
    }

    upstream tt {
	    server 127.0.0.1:3333;
	    server 127.0.0.1:4444;
    }


    upstream mysqlend {
	   drizzle_server 127.0.0.1:3306 protocol=mysql dbname=mysql user=root;
	   drizzle_keepalive max=10 overflow=ignore mode=single;	
    }


    server {
	    listen       8079;
	    server_name  localhost;
	    location /wbs {
		    default_type "text/html";
		    content_by_lua '
			    local wbs  = require "d_wbs"
			    wbs.serv()
			    ';
	    }
    }  

    server {
	    listen       8080;
	    server_name  localhost;

	include my.conf;

        location /log {
            default_type text/plain;
            content_by_lua '
                ngx.say("go to log")

                ';

            log_by_lua '
                local logger = require "resty.logger.socket"
                if not logger.initted() then
                    local ok, err = logger.init {
                        host="127.0.0.1",
                        port=514,  --need to modify /etc/rsyslog.conf $UDPServerRun 514 and restart rsyslogd
                        sock_type="udp",
                        flush_limit = 1,
                        --drop_limit = 5678
                    }
                    if not ok then
                        ngx.log(ngx.ERR, "failed to initialize the logger: ", err)
                        return
                    end
                end

                local bytes, err = logger.log("test logsssssssssssssss")
                --local bytes, err = logger.log(ngx.var.arg_log)
                if err then
                    ngx.log(ngx.ERR, "failed to log message: ", err)
                    return
                end
                        ';
        }




		location /lru {
			default_type text/plain;
			content_by_lua '
				local lru = require "d_lru"
				lru.go()
			';

		}

	    location /get_upstream {
		    default_type text/html;
		    content_by_lua '		
		        local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams

                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
                    end
                end

		';

	    }

	    location /get_upstream_peers {
		    content_by_lua '
		        local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams

		        local function my_print(peers) 
                        for _, srv in ipairs(peers) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
		        end

		local peers = upstream.get_primary_peers("tttt")
		my_print(peers)

		upstream.set_peer_down("tttt", false, 0, true)
		local peers = upstream.get_primary_peers("tttt")
		my_print(peers)

		upstream.set_peer_down("tttt", false, 0, false)
		local peers = upstream.get_primary_peers("tttt")
		my_print(peers)

		local peers = upstream.get_backup_peers("tttt")
		my_print(peers)


		upstream.set_peer_down("tttt",true, 0, true)
		local peers = upstream.get_backup_peers("tttt")
		my_print(peers)

		upstream.set_peer_down("tttt", true, 0, false)
		local peers = upstream.get_backup_peers("tttt")
		my_print(peers)


		';
	    }

 	    location /t {
 		    proxy_pass http://tttt;
 	    }


	    location /lock {
		    default_type "text/html";
		    content_by_lua '
			    local dl  = require "d_lock"
			    dl.query()
			    ';

	    }


	    location = /s {
		    content_by_lua_file '/opt/dark/workspace/openresty/project/s.lua';
	    }

	    location = /thread {
		    content_by_lua_file '/opt/dark/workspace/openresty/project/d_thread.lua';
	    }

	    location = /c {
		    content_by_lua_file '/opt/dark/workspace/openresty/project/c.lua';
	    }

	    location /mrm {
		    default_type "text/html";
		    content_by_lua '
			    local dm  = require "d_mymulti"
			    dm.memc_redis_mysql()
			    ';
	    }

	    location = /memc_redis_mysql {

		default_type text/html;

		content_by_lua '
			local res1,res2,res3 = ngx.location.capture_multi{
					{"/memc",{args="k=ppp&v=ddd"}},
					{"/redis",{args="k=ppp&v=ddd"}},
					{"/mysql",{args="t=user&k=host&v=localhost"}},
									}

			ngx.say(res1.body)
			ngx.say(res2.body)
			ngx.say(res3.body)

		';

		}

	    location /wbc {
		    default_type "text/html";
		    content_by_lua '
			    local wbc  = require "d_wbc"
			    wbc.serv()
			    ';
	    }

	    location /dns {
		    default_type "text/html";
		    content_by_lua '
			    local dd  = require "d_dns"
			    dd.query()
			    ';
	    }

	    location /uploadf {
		    default_type "text/html";
		    content_by_lua '
			    local du  = require "d_uploadf"
			    du.do_uploadf()
			    ';
	    }

        location /memc {
            default_type "text/html";
            content_by_lua '
                local dm  = require "d_memcached"
                dm.setdata()
                dm.getdata()
                ';
        }   

	    location /redis {
		    default_type "text/html";
		    content_by_lua '
			    local dr  = require "d_redis"
			    dr.setdata()
			    dr.getdata()
			    ';
	    } 	
	
	location /mysql_drizzle {
		default_type "text/html";
		drizzle_query $request_body;
		drizzle_pass mysqlend;
	}

	location /mysql_drizzle_getdata {
		default_type "text/html";
		content_by_lua '
			local sql = "select * from user"
           local resp = ngx.location.capture("/mysql_drizzle", {
               method = ngx.HTTP_POST, body = sql
           })
           if resp.status ~= ngx.HTTP_OK or not resp.body then
               error("failed to query mysql")
           end

           local parser = require "rds.parser"
           local res, err = parser.parse(resp.body)
           if res == nil then
               error("failed to parse RDS: " .. err)
           end

           local rows = res.resultset
           if not rows or #rows == 0 then
               ngx.say("empty resultset")
               ngx.exit(0)
           end

	local cjson = require "cjson"

		ngx.say(cjson.encode(rows))
		ngx.say()
--[[
           for i, row in ipairs(rows) do
               ngx.print("row ", i, ": ")
               for col, val in pairs(row) do
                   if val ~= parser.null then
                       ngx.print(col, "=", val, " ")
                   else
                       ngx.print(col, "=null ")
                   end
               end
               ngx.say()
           end
--]]
		';
	}

	    location /mysql {
		    default_type "text/html";
		    content_by_lua '
			    local dm  = require "d_mysql"
			    dm.getdata()
			    dm.getdata_bykey("user", "host", "localhost")
		    ';
	    }	

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
